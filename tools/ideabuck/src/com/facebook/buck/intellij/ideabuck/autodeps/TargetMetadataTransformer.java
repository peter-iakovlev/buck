/*
 * Copyright 2019-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package com.facebook.buck.intellij.ideabuck.autodeps;

import com.intellij.openapi.extensions.ProjectExtensionPointName;
import com.intellij.openapi.project.Project;
import java.util.List;

/**
 * Some targets are generated by macros so autodeps can't add a dependency without knowing which
 * macro generates the target. Plugins can implement this interface to encode the project-specific
 * knowledge on how to transform the information of a generated target to the information of the
 * macro
 */
public abstract class TargetMetadataTransformer {
  public static ProjectExtensionPointName<TargetMetadataTransformer> EP_NAME =
      new ProjectExtensionPointName<>("intellij.buck.plugin.TargetMetadataTransformer");

  /** Utility method to invoke the transformers on the editedTarget */
  public static TargetMetadata transformEditedTarget(Project project, TargetMetadata editedTarget) {
    List<TargetMetadataTransformer> transformers = EP_NAME.getExtensions(project);
    TargetMetadata targetMetadata = editedTarget;
    for (TargetMetadataTransformer transformer : transformers) {
      targetMetadata = transformer.transformEditedTarget(targetMetadata);
    }
    return targetMetadata;
  }

  /** Utility method to invoke the transformers on the importedTarget */
  public static TargetMetadata transformImportedTarget(
      Project project, TargetMetadata importedTarget) {
    List<TargetMetadataTransformer> transformers = EP_NAME.getExtensions(project);
    TargetMetadata targetMetadata = importedTarget;
    for (TargetMetadataTransformer transformer : transformers) {
      targetMetadata = transformer.transformImportedTarget(targetMetadata);
    }
    return targetMetadata;
  }

  /**
   * Transform the TargetMetadata being edited
   *
   * @param editedTarget the TargetMetadata of the target being edited
   * @return
   */
  public abstract TargetMetadata transformEditedTarget(TargetMetadata editedTarget);

  /**
   * Transform the TargetMetadata being edited
   *
   * @param importedTarget the TargetMetadata of the target being edited
   * @return
   */
  public abstract TargetMetadata transformImportedTarget(TargetMetadata importedTarget);
}
